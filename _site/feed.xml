<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Emrah&#39;s Blog</title>
    <description>Sharing lessons learned.
</description>
    <link>https://github.com/emrahkaya/</link>
    <atom:link href="https://github.com/emrahkaya/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 02 Jan 2019 15:24:08 +0300</pubDate>
    <lastBuildDate>Wed, 02 Jan 2019 15:24:08 +0300</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>BIRT Reporting</title>
        <description>&lt;h3 id=&quot;spring-with-swagger-integration&quot;&gt;Spring with Swagger Integration&lt;/h3&gt;

&lt;p&gt;The real problem you’ll encounter will be integrating with spring with swagger. I expect you’re using swagger for your microservice, because it’ll make you easily test your microservice REST API. Unfortunately,  there are two compatibility issues with the current (4.8.0) version of the BIRT with spring/swagger. The two packages &lt;code class=&quot;highlighter-rouge&quot;&gt;com.google.common&lt;/code&gt;and &lt;code class=&quot;highlighter-rouge&quot;&gt;org.slf4j&lt;/code&gt; are put into the jar package of the BIRT, instead of being a dependency. The versions in the BIRT jar are not compatible with spring’s current version which uses &lt;code class=&quot;highlighter-rouge&quot;&gt;net.logstash.logback&lt;/code&gt;.  And it also not compatible with &lt;code class=&quot;highlighter-rouge&quot;&gt;springfox-spring-web&lt;/code&gt;(2.9.2) version which uses &lt;code class=&quot;highlighter-rouge&quot;&gt;google.common&lt;/code&gt; package.&lt;/p&gt;

&lt;p&gt;The easiest and a working way of solving this is to open the BIRT jar file with some archive editing software (ex. winrar) and deleting those directories from the jar file. That way, BIRT will use the ones which come with spring and swagger.&lt;/p&gt;

&lt;p&gt;This workaround needs another step which makes your service uses the modified jar file instead of the one that comes with gradle/maven. Your dependencies section in &lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt;file (or which gradle file you use) should look similar to this:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;springBoot&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;springCloud&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;swagger&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logs&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fileTree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;dir:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;birt_runtime&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;includes:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jar&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;   
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Please notice that I’m using all the files in that folder (which includes all the &lt;a href=&quot;https://download.eclipse.org/birt/downloads/&quot;&gt;BIRT runtime jar files&lt;/a&gt;), because as we’re using the jar file, the gradle system will not be resolving dependencies for it. So, we’re putting all the necessary files (which will also be needed in the runtime while creating the report )&lt;/p&gt;

&lt;p&gt;If you are also using &lt;code class=&quot;highlighter-rouge&quot;&gt;docker&lt;/code&gt; for deployment, you should also not forget to add necessary steps to copy files to the docker image. A similar step is should look like:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;COPY ./birt_runtime/*.jar ./birt_runtime/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And ( :) ) do not forget to somehow map that directory to your &lt;code class=&quot;highlighter-rouge&quot;&gt;EngineConfig&lt;/code&gt; instance. To achieve that you can easily create an environment variable (as &lt;code class=&quot;highlighter-rouge&quot;&gt;BIRT_HOME&lt;/code&gt;) and pass it to the &lt;code class=&quot;highlighter-rouge&quot;&gt;EngineConfig&lt;/code&gt;instance:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;EngineConfig&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EngineConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setBIRTHome&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getenv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;BIRT_HOME&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Or you can use a static directory (like &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;/birt_runtime&quot;&lt;/code&gt;).&lt;/p&gt;

&lt;h3 id=&quot;getting-data-from-a-rest-api-data-source&quot;&gt;Getting Data From a REST API Data Source&lt;/h3&gt;

&lt;p&gt;BIRT doesn’t support REST API Data Sources out of box. But you can get data from such endpoint using scripting. You use an &lt;code class=&quot;highlighter-rouge&quot;&gt;InputStreamReader&lt;/code&gt; and a &lt;code class=&quot;highlighter-rouge&quot;&gt;BufferedReader&lt;/code&gt; which gets data from the URL. After you get all data and accumulate into a &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;inStream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;http://pathtomyservice/restpath&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;openStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;inStreamReader&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;InputStreamReader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;inStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bufferedReader&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BufferedReader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;inStreamReader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bufferedReader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;readLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;inStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After that, you use &lt;code class=&quot;highlighter-rouge&quot;&gt;JSON.parse&lt;/code&gt; method to parse the JSON string and have the JSON object. You can put the resulting object into an object and use it report-wide:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;jsonObject = JSON.parse(result);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For all these work, you’ll also need to import packages in the beginning:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;importPackage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Packages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;importPackage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Packages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;net&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;importPackage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Packages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;apache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;commons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;files-related-to-report&quot;&gt;Files Related to Report&lt;/h3&gt;

&lt;p&gt;The report file may need some resources nearby it (like pictures, etc.). You have three options:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Embed resources into the report&lt;/li&gt;
  &lt;li&gt;Have the images as files in somehow nearby the report&lt;/li&gt;
  &lt;li&gt;Have the images loaded from a data source&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you are using docker, you generally compile your entire application/service into one single jar and copy the jar to the image. For me, I couldn’t make the 1. option run with a single jar file. I chose to use the 2. option which is easy, indeed:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;I’ve set an environment variable like &lt;code class=&quot;highlighter-rouge&quot;&gt;MY_REPORTS_DIR&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I’ve put my reports as folders in that folder.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I used that env. variable in my code for getting the report design file:&lt;/p&gt;

    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Resource&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;salesReportResource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FileSystemResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getenv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MY_REPORTS_DIR&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/salesreport/sales_report.rptdesign&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;IReportRunnable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;design&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;engine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;openReportDesign&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;salesReportResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;fonts&quot;&gt;Fonts&lt;/h3&gt;

&lt;p&gt;Be careful about the font you use. Be sure that the font you use in the report is installed on the nodes. For ex. if you are developing on windows but the microservice you’re creating (as usual) will run on a linux machine. The so common Arial font is not available on linux, so choose Helvetica instead. You can install &lt;a href=&quot;apt:msttcorefonts&quot;&gt;msttcorefonts&lt;/a&gt; if you really want to have Microsoft fonts. Or you can utilize some .css files and use &lt;code class=&quot;highlighter-rouge&quot;&gt;font-family&lt;/code&gt; &lt;a href=&quot;https://www.w3schools.com/csSref/pr_font_font-family.asp&quot;&gt;property&lt;/a&gt; like web developers do, which will make the report choose among available fonts you’ve specified.&lt;/p&gt;
</description>
        <pubDate>Wed, 02 Jan 2019 14:34:26 +0300</pubDate>
        <link>https://github.com/emrahkaya/birt/spring/swagger/2019/01/02/BIRT-Reporting.html</link>
        <guid isPermaLink="true">https://github.com/emrahkaya/birt/spring/swagger/2019/01/02/BIRT-Reporting.html</guid>
        
        
        <category>BIRT</category>
        
        <category>spring</category>
        
        <category>swagger</category>
        
      </item>
    
  </channel>
</rss>
